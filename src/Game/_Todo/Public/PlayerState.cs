///////////////////////////////////////////////////////////////////////////
// <2011>  <DarkEmu>
// Programmed by: Xfs Games
// Website: www.xfsgames.com.ar
///////////////////////////////////////////////////////////////////////////
using System;
using Framework;
using System.Linq;
using System.Text;
using System.Threading;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.IO;
namespace DarkEmu_GameServer
{
    public partial class Systems
    {
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Player Death
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void Player_Up()
        {
            try
            {
                /////////////////////////////////////////////////////////////////////////////////////
                // Normal Death / Return to return point
                /////////////////////////////////////////////////////////////////////////////////////
                        //Normal death
                        if (Character.State.Die && Character.State.DeadType == 1)
                        {
                            if (Character.Information.Level <= 11)
                            {
                                //Check if character is walking should not be happening
                                if (Character.Position.Walking) return;
                                //Stop berserk timer if it were active
                                StopBerserkTimer();
                                //Start sending packets for teleport
                                client.Send(Packet.TeleportOtherStart());
                                //Reset state information
                                Send(Packet.StatePack(this.Character.Information.UniqueID, 0, 1, false));
                                //Set the character hp to max hp / 2
                                this.Character.Stat.SecondHp = this.Character.Stat.Hp / 2;
                                //this.Character.State.SafeState = true;
                                //NotAttackableTimer(5000);
                                this.UpdateHp();
                                //Send packet for updating hp
                                client.Send(Packet.UpdatePlayer(this.Character.Information.UniqueID, 0x20, 1, this.Character.Stat.SecondHp));
                                //Set bool
                                Character.State.Die = false;
                                //Send state pack
                                Send(Packet.StatePack(this.Character.Information.UniqueID, 4, 0, false));
                            }
                            else
                            {

                                //Check if character is walking should not be happening
                                if (Character.Position.Walking) return;
                                //Save information for reverse scrolls
                                SavePlayerReturn();
                                //Close buffs
                                BuffAllClose();
                                //Set bool ingame
                                Character.InGame = false;
                                //Despawn
                                DeSpawnMe();
                                //Despawn objects
                                ObjectDeSpawnCheck();
                                //Send teleport packet
                                client.Send(Packet.TeleportOtherStart());
                                //Update location
                                Teleport_UpdateXYZ(Character.Information.Place);
                                //Set hp to max hp / 2
                                this.Character.Stat.SecondHp = this.Character.Stat.Hp / 2;
                                //Send teleport image
                                client.Send(Packet.TeleportImage(Data.PointBase[Character.Information.Place].xSec, Data.PointBase[Character.Information.Place].ySec));
                                //Set bools
                                Character.Teleport = true;
                                Character.State.Die = false;
                            }
                        }
                        else if (Character.State.Die && Character.State.DeadType == 2)
                        {
                            //Check if character is walking should not be happening
                            if (Character.Position.Walking) return;
                            //Stop berserk timer if it were active
                            StopBerserkTimer();
                            //Start sending packets for teleport
                            client.Send(Packet.TeleportOtherStart());
                            //Reset state information
                            Send(Packet.StatePack(this.Character.Information.UniqueID, 0, 1, false));
                            //Set the character hp to max hp / 2
                            this.Character.Stat.SecondHp = this.Character.Stat.Hp / 2;
                            //this.Character.State.SafeState = true;
                            //NotAttackableTimer(5000);
                            this.UpdateHp();
                            //Send packet for updating hp
                            client.Send(Packet.UpdatePlayer(this.Character.Information.UniqueID, 0x20, 1, this.Character.Stat.SecondHp));
                            //Set bool
                            Character.State.Die = false;
                            //Send state pack
                            Send(Packet.StatePack(this.Character.Information.UniqueID, 4, 0, false));
                        }
                        else
                        {
                            Console.WriteLine("Unknown dead type: " + Character.State.DeadType + "");
                        }
                }
            catch (Exception ex)
            {
                Console.WriteLine("Death error {0}", ex);
                Systems.Debugger.Write(ex);
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Player Question Mark
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void QuestionMark()
        {
            Send(Packet.QuestionMark(Character.Information.UniqueID, PacketInformation.buffer[0]));
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Player Leaving Game
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void LeaveGame()
        {
            try
            {
                byte type = PacketInformation.buffer[0];

                Character.Information.Quit = true;
                client.Send(Packet.StartingLeaveGame(5, type));
                StartWaitingTimer(5000);
            }
            catch (Exception ex)
            {
                Systems.Debugger.Write(ex);
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Player Cancel Leave Game
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void CancelLeaveGame()
        {
            try
            {
                client.Send(Packet.CancelLeaveGame());
                Character.Information.Quit = false;
                Timer.Logout.Dispose();
            }
            catch (Exception ex)
            {
                Systems.Debugger.Write(ex);
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Player Disconnect
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void KickPlayer(Systems Target)
        {

            try
            {
                Target.client.Send((Packet.ChatPacket(7, Target.Character.Information.UniqueID, "You Have been kicked!", "")));
                if (Player != null)
                {
                    MsSQL.UpdateData("UPDATE users SET online='" + 0 + "' WHERE id='" + Target.Player.AccountName + "'");
                    MsSQL.UpdateData("UPDATE character SET online=" + 0 + "' WHERE id='" + Target.Character.Information.UniqueID + "'");
                    Target.Player.Dispose();
                    Target.Player = null;
                }
                if (Target.Character != null)
                {
                    if (Target.Character.Transport.Right) Target.Character.Transport.Horse.DeSpawnMe();
                    if (Target.Character.Grabpet.Active) Target.Character.Grabpet.Details.DeSpawnMe();
                    if (Target.Character.Network.Exchange.Window) Target.Exchange_Close();
                    if (Target.Character.State.Sitting) Target.StopSitDownTimer();
                    Target.StopAttackTimer();
                    Target.BuffAllClose();
                    Target.DeSpawnMe();
                    Target.StopMPRegen();
                    Target.StopHPRegen();
                    Target.SavePlayerPosition();
                    Target.SavePlayerInfo();
                    Target.Character.InGame = false;

                    client.Disconnect(Target.client.clientSocket);
                    Target.client.Close();
                }
            }
            catch (Exception ex)
            {
                Systems.Debugger.Write(ex);
            }
        }
        /// <summary>
        /// This will send ping information if > 20 seconds meaning the client doesnt send ping connection we d/c user.
        /// To prevent cluttering of the server.
        /// </summary>
        public void Ping()
        {
            PingTimer();
            lastPing = DateTime.Now;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Player Emotes
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void Emote()
        {
            client.Send(Packet.Player_Emote(Character.Information.UniqueID, PacketInformation.buffer[0]));
            Send(Packet.Player_Emote(Character.Information.UniqueID, PacketInformation.buffer[0]));
        }
        protected void Pet_SetNewSpeed()
        {
            Character.Grabpet.Details.Run = Character.Speed.RunSpeed;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Player Actions / Sit / Stand / Walk etc
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void Doaction()
        {
            try
            {
                PacketReader Reader = new PacketReader(PacketInformation.buffer);
                List<int> toall = Character.Spawn;
                byte type = Reader.Byte();

                switch (type)
                {
                    case 2:
                        if (Character.Transport.Right)
                        {
                            Send(toall, Packet.SetSpeed(Character.Transport.Horse.UniqueID, Character.Transport.Horse.Speed1, Character.Transport.Horse.Speed2));
                            Send(toall, Packet.ChangeStatus(Character.Transport.Horse.UniqueID, type, 0));
                        }
                        Send(toall, Packet.ChangeStatus(Character.Information.UniqueID, type, 0));
                        break;
                    case 3:
                        if (Character.Transport.Right)
                        {
                            Send(toall, Packet.SetSpeed(Character.Transport.Horse.UniqueID, Character.Transport.Horse.Speed1, Character.Transport.Horse.Speed2));
                            Send(toall, Packet.ChangeStatus(Character.Transport.Horse.UniqueID, type, 0));
                        }
                        Send(toall, Packet.ChangeStatus(Character.Information.UniqueID, type, 0));
                        break;
                    case 4:
                        if (!Character.Stall.Stallactive && !Character.Transport.Right && !Character.Position.Walking && !Character.State.Die)
                        {
                            StartSitTimer(1000);
                        }
                        else
                        {
                            //Needs Error Packet InStall
                        }
                        break;
                    default:
                        Send(toall, Packet.ChangeStatus(Character.Information.UniqueID, type, 0));
                        break;
                }
            }
            catch (Exception ex)
            {
                Systems.Debugger.Write(ex);
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Player Change Hp / Mp
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void SetHpUp(int amount)
        {
            //Setup +

            Character.Stat.SecondHp = Character.Stat.SecondHp + amount;
            UpdateHp();

        }
        void SetMpUp(int amount)
        {
            //Setup +
            Character.Stat.SecondMP = Character.Stat.SecondMP + amount;
            UpdateMp();
        }
        public void DbUpdateStats()
        {
            try
            {
                MsSQL.InsertData("UPDATE character SET strength='" + this.Character.Stat.Strength + "' , intelligence='" + this.Character.Stat.Intelligence + "' , hp='" + Character.Stat.Hp + "' , mp='" + this.Character.Stat.Mp + "' WHERE name='" + this.Character.Information.Name + "'");
            }
            catch (Exception ex)
            {
                Systems.Debugger.Write(ex);
            }
        }
        public void UpdateStrengthMinus(sbyte amount)
        {
            Character.Stat.MinPhyAttack -= (0.45 * amount);
            Character.Stat.MaxPhyAttack -= (0.65 * amount);
            Character.Stat.PhyDef -= (0.40 * amount);
        }
        public void UpdateIntelligenceMinus(sbyte amount)
        {
            Character.Stat.MinMagAttack -= (0.45 * amount);
            Character.Stat.MaxMagAttack -= (0.65 * amount);
            Character.Stat.MagDef -= (0.40 * amount);
        }
    }
}
