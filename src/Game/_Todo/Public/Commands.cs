///////////////////////////////////////////////////////////////////////////
// <2011>  <DarkEmu>
// Programmed by: Xfs Games
// Website: www.xfsgames.com.ar
// File info: Public packet data
///////////////////////////////////////////////////////////////////////////
using System;
using Framework;
using DarkEmu_GameServer.Global;
using System.Linq;
using System.Text;
using System.Threading;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace DarkEmu_GameServer
{
    public partial class Systems
    {
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Gm Command Base
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM()
        {
            if (Character.Information.GM == 1)
            {
                PacketReader Reader = new PacketReader(PacketInformation.buffer);
                short gType         = Reader.Int16();
                //Console.WriteLine("GM Command {0} used by:{1} ",gType, Character.Information.Name);
                switch (gType)
                {
                    case 0:
                        // Command /playercount
                        break;
                    case 1:
                        // Command /finduser
                        break;
                    case 2:
                        // Command / MsgClear
                        break;
                    case 3:
                        GM_TOTOWN(Reader.Text());
                        break;
                    case 4:
                        // Command /Getpos
                        break;
                    case 5:
                        // Command /stat
                        break;
                    case 6:
                        GM_LOADMONSTER(Reader.Int32(), Reader.Byte(), Reader.Byte());
                        break;
                    case 7:
                        GM_MAKEITEM(Reader.Int32(), Reader.Byte());
                        break;
                    case 8:
                        GM_GOUSER(Reader.Text());
                        break;
                    case 12:
                        // Command /zoe
                        GM_ZOE(Reader.Int32(), Reader.Byte());
                        break;
                    case 13:
                        GM_BAN(Reader.Text());
                        break;
                    case 14:
                        GM_INVISIBLE();
                        break;
                    case 15:
                        GM_INVINCIBLE();
                        break;
                    case 16:
                        if (PacketInformation.buffer.Length > 4)
                            GM_WP(Reader.Byte(), Reader.Byte(), Reader.Single(), Reader.Single(), Reader.Single());
                        break;
                    case 17:
                        GM_RECALLUSER(Reader.Text());
                        break;
                    case 19:
                        // Command /instance
                    case 20:
                        GM_MOBKILL(Reader.Int32(), Reader.UInt16());
                        break;
                    case 23:
                        GM_BLOCKLOGOUT(Reader.Text(), Reader.Byte());
                        break;
                    case 26:
                        GM_LIENAME(Reader.Text());
                        break;
                    case 27:
                        //initq
                        GM_SKILL();
                        break;
                    case 42:
                        GM_SPAWN_UNIQUE();
                        break;
                    case 49:
                        GM_CLEARINVEN();
                        break;
                    case 50:
                        // Command /barena 
                        break;
                    case 25:
                        // Command /fakename
                        // Used for transforming now
                        GM_TRANSFORM(Reader.Text());
                        break;
                    case 99: 
                        // Command /power %d
                    case 100: 
                        // Command /timeoff
                        break;
                    case 101: 
                        // Command /timeon
                        break;
                    case 102: 
                        // Command /time %d
                        break;
                    case 103: 
                        // Command /day
                        break;
                    case 104: 
                        // Command /night
                        break;
                    case 105: 
                        // Command /rain %d
                        int type = 2;
                        GM_WEATHER(Reader.Int32(),type);
                        break;
                    case 106: 
                        // Command /snow %d
                        type = 3;
                        GM_WEATHER(Reader.Int32(),type);
                        break;
                    case 107: 
                        // Command /clear
                        type = 1;
                        GM_WEATHER(Reader.Int32(),type);
                        break;
                    case 108: 
                        // Command /+
                        break;
                    case 109: 
                        // Command /-
                        break;
                    case 110: 
                        // Command /zoom
                        break;
                    case 111: 
                        // Command /fast
                        break;
                    case 112: 
                        // Command /showme
                        break;
                    case 113: 
                        // Command /hideme
                        break;
                    case 114: 
                        // Command /camera
                        break;
                    case 115: 
                        // Command /uioff
                        break;
                    case 116: 
                        // Command /uion
                        break;
                    case 117: 
                        // Command /frame
                        break;
                    case 118: 
                        // Command /colon
                        break;
                    case 119:
                        // Command /coloff
                        break;
                    case 130: 
                        // Command /cwclear
                        break;
                    case 131: 
                        // Command /cwpop
                        break;
                    case 132: 
                        // Command /cwgo
                        break;
                    case 133: 
                        // Command /cwstop
                        break;
                    case 134: 
                        // Command /cwsave
                        break;
                    case 135: 
                        // Command /ms
                        break;
                    case 136: 
                        // Command /cs %d
                        break;
                    case 137: 
                        // Command /id
                        break;
                    case 150: 
                        // Command /wire
                        break;
                    case 151: 
                        // Command /ground
                        break;
                    case 152: 
                        // Command /sky
                        break;
                    case 153: 
                        // Command /mobj
                        break;
                    case 154: 
                        // Command /char
                        break;
                    case 155: 
                        // Command /lod
                        break;
                    case 400: 
                        // Command /Item %d
                        break;
                    case 500: 
                        // Command /setfov %d
                        break;
                    case 600: 
                        // Command /setspeed %d
                        break;
                    case 601: 
                        // Command /equip %d
                        break;
                    case 602: 
                        // Command /makeobj %d
                        break;
                    case 603: 
                        // Command /snd %s
                        break;
                    default:
                        Console.WriteLine("Non Coded Gm Command: " + gType);
                        Print.Format(Decode.StringToPack(PacketInformation.buffer));
                        break;
                }
                Reader.Close();
            }
            else
            {
                lock (Systems.clients)
                {
                    foreach (Systems sys in Systems.clients)
                    {
                        try 
                        {
                            if (sys.Character.Information.Name == Character.Information.Name)
                            {
                                sys.client.Send(Packet.ChatPacket(7, Character.Information.UniqueID, "from GM:You are banned.", null));
                                sys.Disconnect("ban");
                                Console.WriteLine("Autobanned user: " + Player.AccountName + " Due to hacking");
                                return;
                            } 
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine("Commands error: " + ex);
                        }
                    }
                }
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Spawn All Uniques
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_SPAWN_UNIQUE()
        {
            Console.WriteLine("@Gameserver:                     Spawned all unique's");
            DarkEmu_GameServer.GlobalUnique.StartTGUnique(0, 0);          //Random spawn tiger girl
            DarkEmu_GameServer.GlobalUnique.StartUriUnique(0, 0);         //Random spawn urichi
            DarkEmu_GameServer.GlobalUnique.StartIsyUnique(0, 0);         //Random spawn isy
            DarkEmu_GameServer.GlobalUnique.StartLordUnique(0, 0);        //Random spawn lord yarkan
            DarkEmu_GameServer.GlobalUnique.StartDemonUnique(0, 0);       //Random spawn demon shaitan
            DarkEmu_GameServer.GlobalUnique.StartCerbUnique(0, 0);        //Random spawn cerberus
            DarkEmu_GameServer.GlobalUnique.StartIvyUnique(0, 0);       //Random spawn captain ivy
            DarkEmu_GameServer.GlobalUnique.StartMedusa(0, 0);            //Random spawn medusa
            DarkEmu_GameServer.GlobalUnique.StartIsis(0, 0);            //Random spawn medusa
            //Game.GlobalUnique.StartSphinx(0, 0);            //Random spawn medusa
            DarkEmu_GameServer.GlobalUnique.StartNeith(0, 0);            //Random spawn medusa
            //Game.GlobalUnique.StartRoc(0, 0);               //Random spawn medusa
            return;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Invincible
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_INVINCIBLE()
        {
                Character.Stat.MaxMagAttack = (500000);
                Character.Stat.MaxPhyAttack = (500000);
                Character.Stat.Hp           = (500000);
                Character.Stat.Mp           = (500000);
                Character.Stat.PhyDef       = (500000);
                Character.Stat.MagDef       = (500000);
                Character.Stat.Parry        = (500000);
                Character.InGame            = false;

                BuffAllClose();
                DeSpawnMe();
                //ObjectDeSpawn();
                ObjectDeSpawnCheck();
                client.Send(Packet.TeleportOtherStart());

                Teleport_UpdateXYZ(Character.Information.Place);
                client.Send(Packet.TeleportImage(Data.PointBase[Character.Information.Place].xSec, Data.PointBase[Character.Information.Place].ySec));
                Character.Teleport              = true;
                Timer.Scroll.Dispose();
                Timer.Scroll                    = null;
                Character.Information.Scroll    = false;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Clear Inventory
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_CLEARINVEN()
        {
            //Options 0 or 1 , in Settings_Custom.ini
            Framework.Ini ini;
            ini = new Framework.Ini(Environment.CurrentDirectory + @"\Settings\Settings.ini");
            string Drop = ini.GetValue("Custom", "GMDrop","0").ToString();

            if (Drop.Equals("1"))
            {
                try
                {
                    //TODO: Add drop all items
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                    return;
                }
            }
            else
            {
                if (Drop.Equals("0"))
                    MsSQL.UpdateData("delete from char_items where owner='" + Character.Information.CharacterID + "'");
                Character.InGame = false;

                BuffAllClose();

                DeSpawnMe();
                //ObjectDeSpawn();
                ObjectDeSpawnCheck();
                client.Send(Packet.TeleportOtherStart());

                Teleport_UpdateXYZ(Character.Information.Place);
                client.Send(Packet.TeleportImage(Data.PointBase[Character.Information.Place].xSec, Data.PointBase[Character.Information.Place].ySec));
                Character.Teleport = true;
                Timer.Scroll.Dispose();
                Timer.Scroll = null;
                Character.Information.Scroll = false;
            }
            
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Transform player
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_TRANSFORM(string model)
        {
            //Check names monsters only
            if (Data.ObjectBase[(Int32)(model)].Name.Contains("MOB_"))
            {
                //Send list
                List<int> To = Character.Spawn;
                //Transform skill id
                int skillid = 7126;
                //Send to item buff
                SpecialBuff(skillid);
                //Send packet
                Send(To, Packet.Transform((Int32)(model), Character.Information.UniqueID));
            }
            else
            {
                return;
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Block Logout
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_BLOCKLOGOUT(string name, byte type)
        {
            //Type one we will use for kicking a user (disconnect).
            if (type == 1)
            {
                Systems playerid = GetPlayerName(name);
                if (playerid.Character != null)
                {
                    KickPlayer(playerid);
                }
            }
            //Type two not sure but we can use more types if needed
            else if (type == 2)
            {

            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Invisible
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_INVISIBLE()
        {
            if (!Character.Information.Invisible)
            {
                List<int> toall = Character.Spawn;
                Send(Packet.StatePack(Character.Information.UniqueID, 4, 4, true));
                Character.Information.Invisible = true;
                return;
            }
            else if (Character.Information.Invisible)
            {
                List<int> toall = Character.Spawn;
                Send(Packet.StatePack(Character.Information.UniqueID, 4, 0, false));
                Character.Information.Invisible = false;
                return;
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Weather changes
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_WEATHER(int amount, int type)
        {
            if (type == 3)
            {
                SendAll(Packet.Weather(3, amount));
            }
            else if (type == 2)
            {
                SendAll(Packet.Weather(2, amount));
            }
            else if (type == 1)
            {
                SendAll(Packet.Weather(1, amount));
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // GM Skill
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_SKILL()  // only for buffs now
        {
            PacketReader reader = new PacketReader(PacketInformation.buffer);
            short ignore = reader.Int16();
            short skilllenght = reader.Int16();
            string skill = reader.String(skilllenght);
            Character.Action.UsingSkillID = (Int32)(skill);
            SkillBuff();
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Create Items
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_MAKEITEM(int itemID, int itemPlus)
        {
            try
            {
                //Get monster mask id from config
                Framework.Ini ini;
                ini = new Framework.Ini(Environment.CurrentDirectory + @"\Settings\Settings.ini");
                string monstermaskid = ini.GetValue("Custom", "Monstermaskid","2002").ToString();
                int maskid = (Int32)(monstermaskid);

                //Get freeslots
                byte slot = GetFreeSlot();
                //No slots return
                if (slot == 0) return;

                AddItem(itemID, (short)itemPlus, slot, Character.Information.CharacterID, 0);
                client.Send(Packet.GM_MAKEITEM(0, slot, itemID, (short)itemPlus, (int)Data.ItemBase[itemID].Defans.Durability, Data.ItemBase[itemID].ID, (Int32)(monstermaskid)));

                Print.Format("[Gameserver:              " + Character.Information.Name + " Has created:  {0}", Data.ItemBase[itemID].Name);
            }
            catch (Exception ex)
            {
                Console.WriteLine("GM_MakeItem: {0}", ex);
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Spawn Monsters
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_LOADMONSTER(int model, byte type, byte type2)
        {
            try
            {
                Framework.Ini ini;
                ini = new Framework.Ini(Environment.CurrentDirectory + @"\Settings\Settings.ini");
                string count = ini.GetValue("Custom", "GMSpawnCount", "1").ToString();
                int total = (Int16)(count);

                for (int i = 1; i <= total; i++)
                {

                    obj o = new obj();

                    o.ID = model;
                    o.Type = type;
                    o.Ids = new Global.ID(Global.ID.IDS.Object);
                    o.UniqueID = o.Ids.GetUniqueID;
                    o.x = Character.Position.x;
                    o.z = Character.Position.z;
                    o.y = Character.Position.y;
                    o.oX = o.x;
                    o.oY = o.y;
                    o.xSec = Character.Position.xSec;
                    o.ySec = Character.Position.ySec;
                    o.AutoMovement = true;
                    o.HP = Data.ObjectBase[model].HP;
                    o.Agresif = Data.ObjectBase[model].Agresif;
                    if (Data.ObjectBase[model].Type == 4) o.LocalType = 4;
                    else if (Data.ObjectBase[model].Type == 1) o.LocalType = 1;
                    else if (Data.ObjectBase[model].Type == 2) o.LocalType = 2;
                    o.AutoSpawn = false;
                    o.Kat = 1;
                    o.SpeedWalk = Data.ObjectBase[o.ID].SpeedWalk;
                    o.SpeedRun = Data.ObjectBase[o.ID].SpeedRun;
                    o.SpeedZerk = Data.ObjectBase[o.ID].SpeedZerk;
                    Systems.aRound(ref o.oX, ref o.oY, 5);
                    Systems.Objects.Add(o);
                    o.SpawnMe();
                    if (o.ID == 1954 || o.ID == 1982 || o.ID == 2002 || o.ID == 3810 || o.ID == 3875 || o.ID == 5871 || o.ID == 14538 || o.ID == 14839 || o.ID == 3877)
                        Systems.SendAll(Packet.Unique_Data(5, (int)o.ID, null));

                        Framework.Ini ini2;
                        ini2 = new Framework.Ini(Environment.CurrentDirectory + @"\Settings\Settings.ini");
                        string spawnmessage = ini.GetValue("Custom", "EnableUniqueMessage", "0").ToString();
                        if (spawnmessage == "1")
                             Systems.SendAll(Packet.Unique_Data(5, (int)o.ID, null));
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Change to fake name
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_LIENAME(string name)
        {
            Character.Information.Name = name;
            Character.InGame = false;

            BuffAllClose();

            DeSpawnMe();
            //ObjectDeSpawn();
            ObjectDeSpawnCheck();
            client.Send(Packet.TeleportOtherStart());

            Teleport_UpdateXYZ(Character.Information.Place);
            client.Send(Packet.TeleportImage(Data.PointBase[Character.Information.Place].xSec, Data.PointBase[Character.Information.Place].ySec));
            Character.Teleport = true;
            Timer.Scroll.Dispose();
            Timer.Scroll = null;
            Character.Information.Scroll = false;
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Kill Selected Monster
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_MOBKILL(int id, ushort type)
        {
            try
            {
                obj o = GetObject(id);
                o.AddAgroDmg(Character.Information.UniqueID, o.HP);
                o.HP = 0;
                o.StartDeadTimer(3000);
                o.GetDie = true;
                o.MonsterDrop();
                o.SetExperience();
                if (o.ID == 1954 || o.ID == 1982 || o.ID == 2002 || o.ID == 3810 || o.ID == 3875 || o.ID == 5871 || o.ID == 14538)
                    Systems.SendAll(Packet.Unique_Data(6, (int)o.ID, Character.Information.Name));
            }
            catch (Exception ex)
            {
                Console.WriteLine("Kill error on command and target: " + id);
                Systems.Debugger.Write(ex);
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Spawn & Kill
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_ZOE(int model, byte count)
        {
            try
            {
                for (int x = 0; x < count; x++)
                {
                    // spawn
                    obj o = new obj();
                    o.ID = model;
                    o.Type = 3;
                    o.Ids = new Global.ID(Global.ID.IDS.Object);
                    o.UniqueID = o.Ids.GetUniqueID;
                    o.x = Character.Position.x;
                    o.z = Character.Position.z;
                    o.y = Character.Position.y;
                    o.oX = o.x;
                    o.oY = o.y;
                    o.xSec = Character.Position.xSec;
                    o.ySec = Character.Position.ySec;
                    o.AutoMovement = false;
                    o.HP = Data.ObjectBase[model].HP;
                    o.Agresif = Data.ObjectBase[model].Agresif;
                    if (Data.ObjectBase[model].Type == 4) o.LocalType = 4;
                    else if (Data.ObjectBase[model].Type == 1) o.LocalType = 1;
                    else if (Data.ObjectBase[model].Type == 2) o.LocalType = 2;
                    o.AutoSpawn = false;
                    o.Kat = 1;
                    o.SpeedWalk = Data.ObjectBase[o.ID].SpeedWalk;
                    o.SpeedRun = Data.ObjectBase[o.ID].SpeedRun;
                    o.SpeedZerk = Data.ObjectBase[o.ID].SpeedZerk;
                    Systems.aRound(ref o.oX, ref o.oY, 5);
                    Systems.Objects.Add(o);
                    o.SpawnMe();
                    o.AddAgroDmg(Character.Information.UniqueID, o.HP);
                    if (o.ID == 1954 || o.ID == 1982 || o.ID == 2002 || o.ID == 3810 || o.ID == 3875 || o.ID == 5871 || o.ID == 14538 || o.ID == 14839 || o.ID == 3877)
                        Systems.SendAll(Packet.Unique_Data(5, (int)o.ID, null));
                    // kill
                    obj o2 = GetObject(o.UniqueID);
                    o2.HP = 0;
                    o2.GetDie = true;
                    o2.SetExperience();
                    o2.MonsterDrop();
                    o2.StartDeadTimer(100);
                    if (o2.ID == 1954 || o2.ID == 1982 || o2.ID == 2002 || o2.ID == 3810 || o2.ID == 3875 || o2.ID == 5871 || o2.ID == 14538)
                        Systems.SendAll(Packet.Unique_Data(6, (int)o2.ID, Character.Information.Name));
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("[ZOE] Error : " + ex.Message);
                Systems.Debugger.Write(ex);
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Ban
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_BAN(string name)
        {
            lock (Systems.clients)
            {
                foreach (Systems sys in Systems.clients)
                {
                    try 
                    {
                        if (sys.Character.Information.Name == name)
                        {
                            MsSQL.UpdateData("UPDATE users SET ban='" + 1 + "' WHERE id='" + sys.Player.AccountName + "'");
                            sys.client.Send(Packet.ChatPacket(7, Character.Information.UniqueID, "from GM:You are banned.", null));
                            sys.Disconnect("normal");
                            return;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("GM_BAN()::error..");
                        Systems.Debugger.Write(ex);
                    }
                }
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Teleport To Town
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_TOTOWN(string name) // need to rework...
        {
            byte number = File.FileLoad.GetTeleport(name);
            if (number == 255) return;
            if (Timer.Movement != null) Timer.Movement.Dispose();
            BuffAllClose();
            client.Send(Packet.TeleportOtherStart());
            
            //ObjectDeSpawn();
            ObjectDeSpawnCheck();
            DeSpawnMe();

            Character.InGame = false;
            Teleport_UpdateXYZ(number);
            client.Send(Packet.TeleportImage(Data.PointBase[number].xSec, Data.PointBase[number].ySec));

            Character.Teleport = true;
            ObjectSpawnCheck();
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Teleport User To Your Location
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_RECALLUSER(string name)
        {
            lock (Systems.clients)
            {
                foreach (Systems sys in Systems.clients)
                {
                    try
                    {
                        if (sys.Character.Information.Name == name && sys.Character.InGame)
                        {
                            if (sys.Timer.Movement != null) sys.Timer.Movement.Dispose();

                            sys.BuffAllClose();
                            sys.DeSpawnMe();
                            sys.ObjectDeSpawnCheck();
                            sys.client.Send(Packet.TeleportOtherStart());

                            sys.Character.Position.xSec = Character.Position.xSec;
                            sys.Character.Position.ySec = Character.Position.ySec;
                            sys.Character.Position.x = Character.Position.x;
                            sys.Character.Position.z = Character.Position.z;
                            sys.Character.Position.y = Character.Position.y;

                            sys.client.Send(Packet.TeleportImage(Character.Position.xSec, Character.Position.xSec));
                            sys.Character.InGame = false;
                            sys.Character.Teleport = true;
                            break;
                        }
                        else if (name == "testpacket")
                        {
                            slotItem item = GetItem((uint)Character.Information.CharacterID, 13, 0);

                            // add blue
                            Data.ItemBlue[item.dbID].blue.Add(11);
                            Data.ItemBlue[item.dbID].blueamount.Add(2);
                            Data.ItemBlue[item.dbID].totalblue++;

                            client.Send(Packet.AlchemyStoneResponse(true, item));
                        }
                        else if (name == "all")
                        {
                            foreach (Systems all in Systems.clients)
                            {
                                if (all.Character.Information.Name != Character.Information.Name)
                                {
                                    if (all.Timer.Movement != null) all.Timer.Movement.Dispose();

                                    //Close buffs
                                    all.BuffAllClose();
                                    //Send teleport packet #1
                                    all.client.Send(Packet.TeleportStart());
                                    //Despawn objects
                                    all.ObjectDeSpawnCheck();
                                    //Despawn player to other players
                                    all.DeSpawnMe();
                                    //Set state
                                    all.Character.InGame = false;
                                    //Update location
                                    all.Character.Position.xSec = Character.Position.xSec;
                                    all.Character.Position.ySec = Character.Position.ySec;
                                    all.Character.Position.x = Character.Position.x;
                                    all.Character.Position.z = Character.Position.z;
                                    all.Character.Position.y = Character.Position.y;
                                    //Required
                                    all.client.Send(Packet.TeleportStart2());
                                    //Send loading screen image
                                    if (all.Character.Position.xSec != Character.Position.xSec)
                                        all.client.Send(Packet.TeleportImage(Data.PointBase[(byte)(Character.Position.xSec)].xSec, Data.PointBase[(byte)(Character.Position.ySec)].ySec));
                                    //Set bool
                                    all.Character.Teleport = true;
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Systems.Debugger.Write(ex);
                    }
                }
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Teleport Yourself To Player Location
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_GOUSER(string name)
        {
            lock (Systems.clients)
            {
                foreach (Systems sys in Systems.clients)
                {
                    try
                    {
                        if (sys.Character.Information.Name == name && sys.Character.InGame)
                        {

                            BuffAllClose();
                            DeSpawnMe();
                            //ObjectDeSpawn();
                            ObjectDeSpawnCheck();
                            client.Send(Packet.TeleportOtherStart());

                            Character.Position.xSec = sys.Character.Position.xSec;
                            Character.Position.ySec = sys.Character.Position.ySec;
                            Character.Position.x = sys.Character.Position.x;
                            Character.Position.z = sys.Character.Position.z;
                            Character.Position.y = sys.Character.Position.y;

                            client.Send(Packet.TeleportImage(Character.Position.xSec, Character.Position.xSec));
                            Character.InGame = false;
                            Character.Teleport = true;
                            break;
                        }
                    }
                    catch (Exception ex)
                    {
                        Systems.Debugger.Write(ex);
                    }
                }
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // World Teleport
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void GM_WP(byte xSec, byte ySec, float x, float z, float y)
        {
            //Close buffs
            BuffAllClose();
            //Send teleport packet #1
            client.Send(Packet.TeleportStart());
            //Despawn objects
            ObjectDeSpawnCheck();
            //Despawn player to other players
            DeSpawnMe();
            //Set state
            Character.InGame = false;
            //Update location
            Character.Position.xSec = xSec;
            Character.Position.ySec = ySec;
            Character.Position.x = DarkEmu_GameServer.Formule.gamex(x,xSec);
            Character.Position.z = z;
            Character.Position.y = DarkEmu_GameServer.Formule.gamey(y,ySec);
            //Required
            client.Send(Packet.TeleportStart2());
            //Send loading screen image
            client.Send(Packet.TeleportImage(xSec,ySec));
            //Set bool
            this.Character.Teleport = true;
            //SavePlayerPosition();
            PlayerDataLoad();
        }
    }
}